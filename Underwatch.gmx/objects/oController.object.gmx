<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>socket = network_create_socket(network_socket_tcp);

//if we dont manage to establish a connection within 3 seconds timeout rather than freezing. 
/*
network_set_config(network_config_connect_timeout,3000);
network_set_config(network_config_use_non_blocking_socket,1)
network_set_timeout(socket,3000,3000);
*/

//attempt to establish the connection
ip = "127.0.0.1";
isConnected = network_connect(socket, ip, 8000);
global.buffer = buffer_create(1024, buffer_fixed, 1);

//create ping and 10 seconds from creation check if its still 0 if it is then we havent connected
global.latency = 0;
alarm[0] = 5 * room_speed;
connectionLost = false;

//do the starting variables
global.playerId = "";
LoggedIn = false
global.Team = 0;
var Name = "";

//timings
TimeString = "10:00";
drawTime = false

//use for information about other players
global.PlayerGrid = ds_grid_create(5,1);
ds_grid_set(global.PlayerGrid, 0, 0, global.playerId)
ds_grid_set(global.PlayerGrid, 1, 0, Name)
ds_grid_set(global.PlayerGrid, 2, 0, global.Team)
ds_grid_set(global.PlayerGrid, 3, 0, 0)
ds_grid_set(global.PlayerGrid, 4, 0, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.latency == 0 {
    connectionLost = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Latency_Request();

var m = global.Minutes;
var s = global.Seconds;

if global.Level != noone {
    drawTime = true
    if m &gt;= 10 {
        m = 0;
    }
    
    if s &gt;= 10 { // 09 : 19
        TimeString = "0" + string(m) + ":" + string(s);
    } else { // 09 : 09
        TimeString = "0" + string(m) + ":0" + string(s);
    }
    
} else {

    drawTime = false
}

// if there is a notification to display
if instance_exists(oDeathMessage) {
    // draw the messages about player deaths
var yy = 32;
    with(oDeathMessage) {
        YY = yy
        yy += 32
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventType = ds_map_find_value(async_load, "type");

switch(eventType) {
    case network_type_data: // when we recieve data from a server
        var buffer = ds_map_find_value(async_load, "buffer"); //create a read buffer and store the incoming information
        buffer_seek(buffer, buffer_seek_start, 0); // seek out the beginning of the newly created read buffer
        
        HandleIncomingPackets(buffer)
    
    break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>network_destroy(socket);
buffer_delete(global.buffer);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if drawTime == true{
    draw_set_colour(c_yellow);
    draw_set_font(font_Clock);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    var xx = global.displayWidth / 2;
    var yy = 48;
    
    draw_sprite(sClockBackground,0,xx,yy);
    draw_text(xx, yy, TimeString);
    draw_set_valign(fa_top);
}

if connectionLost == true {
    draw_set_halign(fa_left);
    draw_set_colour(c_yellow);
    draw_set_font(font_Clock);
    draw_text(64,32,"No Connection")
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
