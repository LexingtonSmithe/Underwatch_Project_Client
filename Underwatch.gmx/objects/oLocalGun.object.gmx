<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGun</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>GunStats()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

if !instance_exists(Owner){
    instance_destroy()
}

RightGunPosition();


var YScale = 0;
if image_yscale = 1 {
    YScale = 1;
} else {
    YScale = 2;
}

//update coordinates, what sprite we are and what number sprite as well as which direction we are facing (xscale)

buffer_seek(global.buffer, buffer_seek_start,0);
buffer_write(global.buffer, buffer_u8, 8);
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_f32, x);
buffer_write(global.buffer, buffer_f32, y);
buffer_write(global.buffer, buffer_f32, image_angle);
buffer_write(global.buffer, buffer_f32, depth);
buffer_write(global.buffer, buffer_u8, image_index);
buffer_write(global.buffer, buffer_u8, YScale);
network_send_packet(oController.socket, global.buffer, buffer_tell(global.buffer));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting
var Len = 12;
var Dir = image_angle + Flip;

SecondsSinceShot = SecondsSinceShot + 1/room_speed;

if mouse_check_button(mb_left) {
    
    if SecondsSinceShot &gt; SecondsBetweenShots &amp;&amp; Ammo &gt; 0 {
        Bullet = instance_create(x+lengthdir_x(Len, Dir), y+lengthdir_y(Len, Dir), BulletType);
        Bullet.speed = BulletSpeed;
        Bullet.direction = image_angle;
        Bullet.image_angle = Bullet.direction;
        Bullet.Owner = global.playerId
        Bang = instance_create(x+lengthdir_x(Len, Dir), y+lengthdir_y(Len, Dir), MuzzleType);
        Bang.image_angle = image_angle;
        Ammo = Ammo - 1;
        SecondsSinceShot = 0;
        //Tell the server we fired a shot
        buffer_seek(global.buffer, buffer_seek_start,0);
        buffer_write(global.buffer, buffer_u8, 9);
        buffer_write(global.buffer, buffer_u32, Bullet.Owner);
        buffer_write(global.buffer, buffer_u8, global.PlayerType);
        buffer_write(global.buffer, buffer_f32, Bullet.x);
        buffer_write(global.buffer, buffer_f32, Bullet.y);
        buffer_write(global.buffer, buffer_f32, Bullet.image_angle);
        buffer_write(global.buffer, buffer_f32, Bullet.speed);
        network_send_packet(oController.socket, global.buffer, buffer_tell(global.buffer));
        
        Firing = 1
    } else {
        Firing = 0
    }
    
}
if Ammo &lt;= 0 {
    Reloading = true;
}

if Reloading = true &amp;&amp; Ammo != MaxAmmo{
    Ammo = 0;
    SecondsReloading = SecondsReloading + 1 / room_speed;
    
    if SecondsReloading &gt; SecondsUntilReloaded {
        Ammo = MaxAmmo;
        SecondsReloading = 0; 
        Reloading = false;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>AmmoCounter()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Reloading = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
